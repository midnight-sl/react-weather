{"version":3,"sources":["helpers/api.js","components/WeatherTab.js","App.js","index.js"],"names":["api","axios","create","baseURL","getCurrentWeather","query","a","get","weatherResult","data","WeatherTab","useState","city","setCity","currentWeather","setCurrentWeather","latitude","setLatitude","longitude","setLongitude","useEffect","navigator","geolocation","permissions","name","then","result","state","getCurrentPosition","handleSuccess","handleErrors","alert","onchange","sessionStorage","setItem","JSON","stringify","err","console","warn","code","message","pos","crd","coords","window","confirm","getCoordinatesWeather","weather","current","location","country","handleShowWeather","event","preventDefault","trim","weatherFromStorage","parse","getItem","getCityWeather","className","type","value","onChange","target","onClick","windToShow","temp","temperature","feelTemp","feelslike","humidity","description","weather_descriptions","iconLocationString","weather_icons","wind","wind_dir","windSpeed","wind_speed","src","alt","toLowerCase","length","renderWeatherBlock","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f25a4a3c.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst accessKey = 'a4ccf188a535d74355cc5968008e34df';\n\nconst api = axios.create({\n  baseURL: 'http://api.weatherstack.com/'\n});\n\nexport const getCurrentWeather = async (query) => {\n  const weatherResult = await api.get(`/current?access_key=${accessKey}&query=${query}`);\n  // console.log(weatherResult.data, \"ANY DATA IN API???\")\n  return weatherResult.data;\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { getCurrentWeather } from '../helpers/api';\nimport '../styles/Weather.css'\n\n\nexport default function WeatherTab() {\n\n  const [city, setCity] = useState('');\n  const [currentWeather,  setCurrentWeather] = useState(null);\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.permissions\n        .query({ name: \"geolocation\" })\n        .then(function (result) {\n          if (result.state === \"granted\") {\n            navigator.geolocation.getCurrentPosition(handleSuccess);\n\n          } else if (result.state === \"prompt\") {\n            navigator.geolocation.getCurrentPosition(handleSuccess, handleErrors);\n\n          } else if (result.state === \"denied\") {\n            alert(\"Allow the browser to use your location or choose the city manually!\");\n          }\n          result.onchange = function () {\n          };\n        });\n    } else {\n      alert(\"Sorry location is not available! Choose the city manually!\");\n    }\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  },[]);\n\n  useEffect(() => {\n    sessionStorage.setItem(`${city}-weather`, JSON.stringify(currentWeather));\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  },[currentWeather])\n\n  const handleErrors = (err) => {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  const handleSuccess = async (pos) => {\n    const crd = pos.coords;\n\n    setLatitude(crd.latitude);\n    setLongitude(crd.longitude);\n\n    const coords = latitude + ',' + longitude;\n\n    if (latitude && longitude) {\n      if(window.confirm('Proceed and show weather for your current location?')){\n        const weather = await getCoordinatesWeather(coords);\n        setCurrentWeather(weather.current);\n        setCity(`${weather.location.name}, ${weather.location.country}`);\n      }\n    }\n    \n  }\n\n  const handleShowWeather = async(event) => {\n    event.preventDefault();\n    if (!!city.trim()) {\n\n      const weatherFromStorage =  JSON.parse(sessionStorage.getItem(`${city}-weather`));\n      if (!!weatherFromStorage) {\n        setCurrentWeather(weatherFromStorage);\n\n      } else {\n        const weather = await getCityWeather();\n        setCurrentWeather(weather.current);\n        return weather;\n      }\n      \n    } else {\n      alert('Write correct city')\n    }\n  }\n\n  \n  const getCityWeather = async() => {\n    const current = await getCurrentWeather(city);\n    return current;\n  }\n  const getCoordinatesWeather = async(coords) => {\n    const current = await getCurrentWeather(coords);\n    return current;\n  }\n\n  const renderWeatherBlock = () => {\n    if (currentWeather){\n      const temp = currentWeather.temperature;\n      const feelTemp = currentWeather.feelslike;\n      const humidity = currentWeather.humidity;\n      const description = currentWeather.weather_descriptions[0];\n      const iconLocationString = currentWeather.weather_icons[0];\n      const wind = currentWeather.wind_dir;\n      const windSpeed = currentWeather.wind_speed;\n\n      let windToShow;\n      switch (wind) {\n        case 'N':\n          windToShow = 'North';\n          break;\n        case 'NE':\n          windToShow = 'Northeast';\n          break;\n        case 'E':\n          windToShow = 'East';\n          break;\n        case 'SE':\n          windToShow = 'Southeast';\n          break;\n        case 'S':\n          windToShow = 'South';\n          break;\n        case 'SW':\n          windToShow = 'Southwest';\n          break;\n        case 'W':\n          windToShow = 'West';\n          break;\n        case 'NW':\n          windToShow = 'Northwest';\n          break;\n        default:\n          windToShow ='absent';\n      }\n      \n\n      return <div className='weather-block'>\n        <img src={iconLocationString} alt='weather icon'/>\n        <p className='description'>Current weather in {city} is {temp} degrees and {description.toLowerCase()}. Feels like {feelTemp} degrees.</p><p className='description'> Humidity is {humidity}%. Wind is {wind.length === 3 ? wind : windToShow}, {windSpeed} km/hour</p>\n      </div>\n    } else {\n      return <p>Enter name of the city to show the weather</p>\n    }\n  }\n\n  return (\n    <div className=\"weather page\">\n      <div className='weather-header'>\n        <h2>Current Weather</h2>\n      </div>\n      <div className=\"choose-city\">\n        <form>\n          <input type=\"text\" name=\"city\" value={city} onChange={event => setCity(event.target.value)} />\n          <button type=\"submit\" onClick={handleShowWeather}>Show Weather</button>\n        </form>\n      {renderWeatherBlock()}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './styles/App.css';\nimport WeatherTab from './components/WeatherTab'\n\nexport default function App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <WeatherTab />\n        </Route>\n      </Switch>\n\n    </Router>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}